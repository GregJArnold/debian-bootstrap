connectionstring        = hostaddr={{ '127.0.0.1' if is_auth is defined and is_auth else auth.host }} sslmode=disable dbname={{ auth.dbname }} user={{ auth.user }} password={{ auth.password }} connect_timeout=1

# you can use anything postgres accepts as table expression

# Must return "usernames", 1 column, list
getgroupmembersbygid    = SELECT users.user_name FROM users,groups,user_group WHERE groups.gid=$1 and groups.group_id = user_group.group_id and users.user_id = user_group.user_id
# Must return passwd_name, passwd_passwd, passwd_gecos, passwd_dir, passwd_shell, passwd_uid, passwd_gid
getpwnam        = SELECT user_name, 'x', realname, homedir, shell, uid, gid FROM users WHERE user_name = $1
# Must return passwd_name, passwd_passwd, passwd_gecos, passwd_dir, passwd_shell, passwd_uid, passwd_gid
getpwuid        = SELECT user_name, 'x', realname, homedir, shell, uid, gid FROM users WHERE uid = $1
# All users
allusers        = SELECT user_name, 'x', realname, homedir, shell, uid, gid FROM users
# Must return group_name, group_passwd, group_gid
getgrnam        = SELECT group_name, 'x', gid, ARRAY(SELECT users.user_name FROM users, user_group WHERE user_group.group_id = groups.group_id and user_group.user_id = users.user_id) AS members FROM groups WHERE group_name = $1
# Must return group_name, group_passwd, group_gid
getgrgid        = SELECT group_name, 'x', gid, ARRAY(SELECT users.user_name FROM users, user_group WHERE user_group.group_id = groups.group_id and user_group.user_id = users.user_id) AS members FROM groups WHERE gid = $1
# Must return gid.  %s MUST appear first for username match in where clause
groups_dyn      = SELECT groups.gid FROM user_group, users, groups where users.user_name = $1 and user_group.user_id = users.user_id and user_group.group_id = groups.group_id and groups.gid <> $2
allgroups       = SELECT group_name, 'x', gid, ARRAY(SELECT users.user_name FROM users, user_group WHERE user_group.group_id = groups.group_id and user_group.user_id = users.user_id) AS members FROM groups
