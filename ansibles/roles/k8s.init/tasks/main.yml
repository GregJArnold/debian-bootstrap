# vim:ft=ansible:
---

- name: Install kubectl
  become: true
  ansible.builtin.apt:
    pkg:
      - kubectl
    state: present

- name: Create K8s PKI directory
  become: true
  ansible.builtin.file:
    path: /etc/kubernetes/pki/etcd
    state: directory
    owner: root
    group: root
    mode: '0755'
 
- name: Add etcd PKI certs
  become: true
  ansible.builtin.copy:
    remote_src: true
    src: "~{{ ansible_user }}/etcd-pki/cert/{{ item.src }}"
    dest: "/etc/kubernetes/pki/{{ item.dest }}"
    owner: root
    group: root
    mode: '0644'
  loop:
    - { src: "ca.pem", dest: "etcd/ca.pem" }
    - { src: "client.pem", dest: "apiserver-etcd-client.crt" }
    - { src: "client-key.pem", dest: "apiserver-etcd-client.key" }

- name: Build kubeadm-config.yml
  become: true
  ansible.builtin.template:
    src: 'templates/kubeadm-config.yml.j2'
    dest: ~/kubeadm-config.yml
    owner: root
    group: root
    mode: '0644'

- name: initialize the cluster
  become: true
  ansible.builtin.shell: kubeadm init --config ~/kubeadm-config.yml --upload-certs >> cluster_initialized.txt
  args:
    chdir: $HOME
    creates: cluster_initialized.txt

- name: create .kube directory
  ansible.builtin.file:
    path: $HOME/.kube
    state: directory
    mode: 0755

- name: copy admin.conf to user's kube config
  become: true
  ansible.builtin.copy:
    src: /etc/kubernetes/admin.conf
    dest: "~{{ ansible_user }}/.kube/config"
    remote_src: yes
    owner: "{{ ansible_user }}"

- name: Build kube-flannel.yml
  ansible.builtin.template:
    src: templates/kube-flannel.yml.j2
    dest: ~/kube-flannel.yml
    mode: '0644'

- name: install Pod network
  ansible.builtin.shell: kubectl apply -f ~/kube-flannel.yml >> pod_network_setup.txt
  args:
    chdir: $HOME
    creates: pod_network_setup.txt

- name: Fetch API key
  become: true
  ansible.builtin.shell: kubeadm --config ~/kubeadm-config.yml init phase upload-certs --upload-certs
  register: api_key_raw

- name: Parse API Key
  ansible.builtin.set_fact:
    api_key: "{{ api_key_raw.stdout_lines[-1] }}"
 
- name: Debug API Key
  ansible.builtin.debug:
    var: api_key

- name: Get join command
  become: true
  ansible.builtin.shell: kubeadm token create --print-join-command
  register: join_command_raw

- name: Parse join command
  become: true
  ansible.builtin.set_fact:
    join_command: "{{ join_command_raw.stdout_lines[0] }}"

- name: Debug Join command
  ansible.builtin.debug:
    var: join_command

- name: Get control plane join command
  when: inventory_hostname in groups['control_plane']
  ansible.builtin.shell: kubeadm token create --print-join-command --certificate-key {{ api_key }}
  register: control_join_command_raw

- name: Parse control plane join command
  ansible.builtin.set_fact:
    control_join_command: "{{ control_join_command_raw.stdout_lines[0] }}"

- name: Debug Control Join command
  ansible.builtin.debug:
    var: control_join_command
